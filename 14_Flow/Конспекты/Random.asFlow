import kotlinx.coroutines.currentCoroutineContext
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.collect
import kotlin.random.Random

fun main(args: Array<String>) {
    runBlocking {
        launch {
            Generator.flow().collect {
                println("Collected value - $it")
                delay(200)
            }
        }
    }

}

object Generator{
    val flow = kotlinx.coroutines.flow.flow {
        while (currentCoroutineContext().isActive) {
            emit(Random.nextInt())
            delay(1000)
        }
    }

    fun flow(): Flow<Int>{
        return (0..100).asFlow()
    }
}



